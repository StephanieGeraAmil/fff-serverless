service: fff-serverless

frameworkVersion: "3"
custom:
  stage: "${opt:stage, self:provider.stage}"
provider:
  websocketsApiName: websockets-api
  websocketsApiRouteSelectionExpression: ${request.body.action}
  name: aws
  stage: "dev"
  runtime: nodejs12.x
  region: us-east-1
  environment: ${file(env.yml):${self:custom.stage}}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - logs:*
        - states:*
        - events:*
      Resource:
        - "*"

functions:
  create-user:
    handler: src/handler/createUser.createUser
    events:
      - http:
          path: users
          method: post
          cors: true
  get-user:
    handler: src/handler/getUser.getUser
    events:
      - http:
          path: users
          method: get
          cors: true

  update-user:
    handler: src/handler/updateUser.updateUser
    events:
      - http:
          path: users/{param}
          method: put
          cors: true
  delete-user:
    handler: src/handler/deleteUser.deleteUser
    events:
      - http:
          path: users/{param}
          method: delete
          cors: true
  create-event:
    handler: src/handler/createEvent.createEvent
    events:
      - http:
          path: events
          method: post
          cors: true
  list-events:
    handler: src/handler/listEvents.listEvents
    events:
      - http:
          path: events
          method: get
          cors: true
  get-event:
    handler: src/handler/getEvent.getEvent
    events:
      - http:
          path: events/{param}
          method: get
          cors: true
  update-event:
    handler: src/handler/updateEvent.updateEvent
    events:
      - http:
          path: events/{param}
          method: put
          cors: true
  delete-event:
    handler: src/handler/deleteEvent.deleteEvent
    events:
      - http:
          path: events/{param}
          method: delete
          cors: true
  OnConnectHandler:
    handler: src/handler/wsConnectionHandler.onConnect
    events:
      - websocket:
          route: $connect
  OnDisconnect:
    handler: src/handler/wsConnectionHandler.onDisconnect
    events:
      - websocket:
          route: $disconnect
  OnBroadcast:
    handler: src/handler/wsConnectionHandler.onBroadcast
    events:
      - websocket:
          route: broadcast
  Send:
    handler: src/handler/wsConnectionHandler.onSend
    events:
      - websocket:
          route: send
  AddConnectionInfo:
    handler: src/handler/wsConnectionHandler.onAddConnectionInfo
    events:
      - websocket:
          route: addConnectionInfo
  CrudEvents:
    handler: src/handler/wsConnectionHandler.onEventCRUD
    events:
      - websocket:
          route: eventCrud

    # we would need to add a JoinEvent handler and a LeaveEvent handler
