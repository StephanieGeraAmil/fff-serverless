service: fff-serverless

frameworkVersion: "3"
custom:
  stage: "${opt:stage, self:provider.stage}"
provider:
  websocketsApiName: websockets-api
  websocketsApiRouteSelectionExpression: ${request.body.action}
  name: aws
  stage: "dev"
  runtime: nodejs12.x
  region: us-east-1
  environment: ${file(env.yml):${self:custom.stage}}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - logs:*
        - states:*
        - events:*
        - execute-api:ManageConnections
        - lambda:InvokeFunction
      Resource:
        - "*"

functions:
  create-user:
    handler: src/handler/createUser.createUser
    events:
      - http:
          path: users
          method: post
          cors: true
  get-user:
    handler: src/handler/getUser.getUser
    events:
      - http:
          path: users
          method: get
          cors: true
  update-user:
    handler: src/handler/updateUser.updateUser
    events:
      - http:
          path: users/{id}
          method: put
          cors: true
  delete-user:
    handler: src/handler/deleteUser.deleteUser
    events:
      - http:
          path: users/{id}
          method: delete
          cors: true
  OnConnectHandler:
    handler: src/handler/wsConnectionHandler.onConnect
    events:
      - websocket:
          route: $connect
  OnDisconnect:
    handler: src/handler/wsConnectionHandler.onDisconnect
    events:
      - websocket:
          route: $disconnect
  AddConnectionInfo:
    handler: src/handler/wsConnectionHandler.onAddConnectionInfo
    events:
      - websocket:
          route: addConnectionInfo
  ListEvents:
    handler: src/handler/listEvents.listEvents
    events:
      - websocket:
          route: getListEvents
  AddEvent:
    handler: src/handler/addEvent.addEvent
    events:
      - websocket:
          route: addEvent
  UpdateEvent:
    handler: src/handler/updateEvent.updateEvent
    events:
      - websocket:
          route: updateEvent

  # we would need to add a JoinEvent handler and a LeaveEvent handler
#   requestContext: {
#     routeKey: 'listEvents',
#     messageId: 'CDV1wf1ioAMCLpw=',
#     eventType: 'MESSAGE',
#     extendedRequestId: 'CDV1wG9fIAMFqTg=',
#     requestTime: '19/Mar/2023:23:38:25 +0000',
#     messageDirection: 'IN',
#     stage: 'dev',
#     connectedAt: 1679269104866,
#     requestTimeEpoch: 1679269105310,
#     identity: {
#       userAgent: 'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Mobile Safari/537.36',
#       sourceIp: '179.24.122.78'
#     },
#     requestId: 'CDV1wG9fIAMFqTg=',
#     domainName: '1uw1x88x5b.execute-api.us-east-1.amazonaws.com',
#     connectionId: 'CDV1rf1doAMCLpw=',
#     apiId: '1uw1x88x5b'
#   },
#   body: '{"action":"listEvents"}',
#   isBase64Encoded: false
# }

# {"connectionId":"$context.connectionId",
# "domainName":"$context.domainName",
# "stage":"$context.stage"
# }

# {
#     "connectionId": "$context.connectionId",
#    "data":"input.body"
# }
